--- a/fatfs/src/ff.c
+++ b/fatfs/src/ff.c
@@ -1063,7 +1063,7 @@ DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
 
 static
 FRESULT dir_sdi (
-	DIR *dj,		/* Pointer to directory object */
+	FATFS_DIR *dj,		/* Pointer to directory object */
 	WORD idx		/* Directory index number */
 )
 {
@@ -1111,7 +1111,7 @@ FRESULT dir_sdi (
 
 static
 FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
-	DIR *dj,		/* Pointer to directory object */
+	FATFS_DIR *dj,		/* Pointer to directory object */
 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
 )
 {
@@ -1351,7 +1351,7 @@ BYTE sum_sfn (
 
 static
 FRESULT dir_find (
-	DIR *dj			/* Pointer to the directory object linked to the file name */
+	FATFS_DIR *dj			/* Pointer to the directory object linked to the file name */
 )
 {
 	FRESULT res;
@@ -1412,7 +1412,7 @@ FRESULT dir_find (
 #if _FS_MINIMIZE <= 1
 static
 FRESULT dir_read (
-	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
+	FATFS_DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
 )
 {
 	FRESULT res;
@@ -1469,7 +1469,7 @@ FRESULT dir_read (
 #if !_FS_READONLY
 static
 FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
-	DIR *dj				/* Target directory with object name to be created */
+	FATFS_DIR *dj				/* Target directory with object name to be created */
 )
 {
 	FRESULT res;
@@ -1576,7 +1576,7 @@ FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many
 #if !_FS_READONLY && !_FS_MINIMIZE
 static
 FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
-	DIR *dj				/* Directory object pointing the entry to be removed */
+	FATFS_DIR *dj				/* Directory object pointing the entry to be removed */
 )
 {
 	FRESULT res;
@@ -1621,7 +1621,7 @@ FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
 
 static
 FRESULT create_name (
-	DIR *dj,			/* Pointer to the directory object */
+	FATFS_DIR *dj,			/* Pointer to the directory object */
 	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
 )
 {
@@ -1835,7 +1835,7 @@ FRESULT create_name (
 #if _FS_MINIMIZE <= 1
 static
 void get_fileinfo (		/* No return code */
-	DIR *dj,			/* Pointer to the directory object */
+	FATFS_DIR *dj,			/* Pointer to the directory object */
 	FILINFO *fno	 	/* Pointer to the file information to be filled */
 )
 {
@@ -1917,7 +1917,7 @@ void get_fileinfo (		/* No return code */
 
 static
 FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
-	DIR *dj,			/* Directory object to return last directory and found object */
+	FATFS_DIR *dj,			/* Directory object to return last directory and found object */
 	const TCHAR *path	/* Full-path string to find a file or directory */
 )
 {
@@ -2247,7 +2247,7 @@ FRESULT f_open (
 )
 {
 	FRESULT res;
-	DIR dj;
+	FATFS_DIR dj;
 	BYTE *dir;
 	DEF_NAMEBUF;
 
@@ -2696,7 +2696,7 @@ FRESULT f_chdir (
 )
 {
 	FRESULT res;
-	DIR dj;
+	FATFS_DIR dj;
 	DEF_NAMEBUF;
 
 
@@ -2729,7 +2729,7 @@ FRESULT f_getcwd (
 )
 {
 	FRESULT res;
-	DIR dj;
+	FATFS_DIR dj;
 	UINT i, n;
 	DWORD ccl;
 	TCHAR *tp;
@@ -2960,7 +2960,7 @@ FRESULT f_lseek (
 /*-----------------------------------------------------------------------*/
 
 FRESULT f_opendir (
-	DIR *dj,			/* Pointer to directory object to create */
+	FATFS_DIR *dj,			/* Pointer to directory object to create */
 	const TCHAR *path	/* Pointer to the directory path */
 )
 {
@@ -3000,7 +3000,7 @@ FRESULT f_opendir (
 /*-----------------------------------------------------------------------*/
 
 FRESULT f_readdir (
-	DIR *dj,			/* Pointer to the open directory object */
+	FATFS_DIR *dj,			/* Pointer to the open directory object */
 	FILINFO *fno		/* Pointer to file information to return */
 )
 {
@@ -3047,7 +3047,7 @@ FRESULT f_stat (
 )
 {
 	FRESULT res;
-	DIR dj;
+	FATFS_DIR dj;
 	DEF_NAMEBUF;
 
 
@@ -3192,7 +3192,7 @@ FRESULT f_unlink (
 )
 {
 	FRESULT res;
-	DIR dj, sdj;
+	FATFS_DIR dj, sdj;
 	BYTE *dir;
 	DWORD dclst;
 	DEF_NAMEBUF;
@@ -3220,7 +3220,7 @@ FRESULT f_unlink (
 				if (dclst < 2) {
 					res = FR_INT_ERR;
 				} else {
-					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
+					mem_cpy(&sdj, &dj, sizeof(FATFS_DIR));	/* Check if the sub-dir is empty or not */
 					sdj.sclust = dclst;
 					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
 					if (res == FR_OK) {
@@ -3260,7 +3260,7 @@ FRESULT f_mkdir (
 )
 {
 	FRESULT res;
-	DIR dj;
+	FATFS_DIR dj;
 	BYTE *dir, n;
 	DWORD dsc, dcl, pcl, tim = get_fattime();
 	DEF_NAMEBUF;
@@ -3335,7 +3335,7 @@ FRESULT f_chmod (
 )
 {
 	FRESULT res;
-	DIR dj;
+	FATFS_DIR dj;
 	BYTE *dir;
 	DEF_NAMEBUF;
 
@@ -3376,7 +3376,7 @@ FRESULT f_utime (
 )
 {
 	FRESULT res;
-	DIR dj;
+	FATFS_DIR dj;
 	BYTE *dir;
 	DEF_NAMEBUF;
 
@@ -3417,7 +3417,7 @@ FRESULT f_rename (
 )
 {
 	FRESULT res;
-	DIR djo, djn;
+	FATFS_DIR djo, djn;
 	BYTE buf[21], *dir;
 	DWORD dw;
 	DEF_NAMEBUF;
@@ -3438,7 +3438,7 @@ FRESULT f_rename (
 				res = FR_NO_FILE;
 			} else {
 				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
-				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
+				mem_cpy(&djn, &djo, sizeof(FATFS_DIR));		/* Check new object */
 				res = follow_path(&djn, path_new);
 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
--- a/fatfs/src/ff.h
+++ b/fatfs/src/ff.h
@@ -152,7 +152,7 @@ typedef struct {
 	WCHAR*	lfn;			/* Pointer to the LFN working buffer */
 	WORD	lfn_idx;		/* Last matched LFN index number (0xFFFF:No LFN) */
 #endif
-} DIR;
+} FATFS_DIR;
 
 
 
@@ -207,8 +207,8 @@ FRESULT f_open (FIL*, const TCHAR*, BYTE);			/* Open or create a file */
 FRESULT f_read (FIL*, void*, UINT, UINT*);			/* Read data from a file */
 FRESULT f_lseek (FIL*, DWORD);						/* Move file pointer of a file object */
 FRESULT f_close (FIL*);								/* Close an open file object */
-FRESULT f_opendir (DIR*, const TCHAR*);				/* Open an existing directory */
-FRESULT f_readdir (DIR*, FILINFO*);					/* Read a directory item */
+FRESULT f_opendir (FATFS_DIR*, const TCHAR*);				/* Open an existing directory */
+FRESULT f_readdir (FATFS_DIR*, FILINFO*);					/* Read a directory item */
 FRESULT f_stat (const TCHAR*, FILINFO*);			/* Get file status */
 FRESULT f_write (FIL*, const void*, UINT, UINT*);	/* Write data to a file */
 FRESULT f_getfree (const TCHAR*, DWORD*, FATFS**);	/* Get number of free clusters on the drive */
